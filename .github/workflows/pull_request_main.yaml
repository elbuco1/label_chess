name: Pull request main

on:
  pull_request:
    branches:
      - main

jobs:
  Test:
    runs-on: ubuntu-latest
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          pip install -e .
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 ./label_chess/* --max-line-length=90 --exclude=tests/*,label_chess/VERSION,label_chess/__init__.py,label_chess/controllers/__init__.py,label_chess/views/__init__.py
      - name: Test with pytest
        run: |
          pytest -vvv tests/* --cov=label_chess

      - name: Test version increase
        run: |
          git fetch
          FORMER_VERSION=$(git show origin/main:label_chess/VERSION) || FORMER_VERSION=0.0.0
          CURRENT_VERSION=$(python setup.py --version)
          python check_version_increase.py  version_increased --former_version $FORMER_VERSION --current_version $CURRENT_VERSION

  Build_exe:
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
          
      - name: Build dist
        run: |
          sudo apt-get install python3-pip
          python3 -m venv build_exe
          source build_exe/bin/activate
          python3 -m pip install --upgrade pip pyinstaller wheel setuptools
          python3 -m pip install .
          CURRENT_VERSION=$(python setup.py --version)
          SITES_PACKAGE_PATH=build_exe/lib/python3.7/site-packages
          bash pyinstaller.sh $SITES_PACKAGE_PATH $CURRENT_VERSION-dev

      - name: 'Upload .exe'
        uses: actions/upload-artifact@v2
        with:
          name: label_chess-dev
          path: ./dist/label_chess-*-dev

  Build_package:
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: 'x64'
      - name: Install dependencies
        run: python -m pip install --upgrade pip setuptools wheel twine
      - name: Build dist
        run: |
          rm -rf dist
          python3 setup.py sdist bdist_wheel
          twine check dist/*

  Pre-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [Build_exe, Build_package]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    steps:  
      - uses: actions/checkout@v2
  #     - name: Set up Python 3.x
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.7'
  #         architecture: 'x64'    

  #     - name: 'Get version'
  #       run: |
  #         VERSION=$(python setup.py --version)-dev
  #         echo "version=$VERSION" >> $GITHUB_ENV

  #     - name: 'Download app artefact'
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: label_chess-dev
  #     - name: 'Create GitHub Release'
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: ./label_chess-*-dev        
  #         tag_name: ${{ env.version }}
  #         name: Pre-release ${{ env.version }}
  #         prerelease: True